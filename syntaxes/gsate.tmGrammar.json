{
    "scopeName": "source.gsate",
    "patterns": [{
        "include": "#expression"
    }],
    "repository": {
        "expression": {
            "patterns": [{
                    "include": "#letter"
                },
                {
                    "include": "#paren-expression"
                },
                {
                    "include": "#doubleQuotedString"
                },
                {
                    "include": "#interpolatedStringContent"
                },
                {
                    "include": "#loop"
                },
                {
                    "include": "#support"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#member_access"
                },
                {
                    "include": "#comment"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "includes": "#comments-base"
                }
            ]
        },
        "comment": {
             "begin": "(^\\s+)?(?<=^|\\W)(?<!-)(?=#)(?!#{)",
             "beginCaptures": {
                 "1": {
                     "name": "punctuation.whitespace.comment.leading.ate"
                 }
             },
             "end": "(?!\\G)",
             "patterns": [
                 {
                     "begin": "#!",
                     "beginCaptures": {
                         "0": {
                             "name": "punctuation.definition.comment.shebang.ate"
                         }
                     },
                     "end": "$",
                     "name": "comment.line.number-sign.shebang.ate"
                 },
                 {
                     "begin": "#",
                     "beginCaptures": {
                         "0": {
                             "name": "punctuation.definition.comment.ate"
                         }
                     },
                     "end": "$",
                     "name": "comment.line.number-sign.ate"
                 },
                 {
                     "include": "#codetags"
                 }
             ]
        },
        "comments-base": {
            "name": "comment.line.number-sign.ate",
            "begin": "(\\#)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.comment.ate"
                }
            },
            "end": "($)",
            "patterns": [
                {
                    "include": "#codetags"
                }
            ]
        },
        "codetags": {
            "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
            "captures": {
                "1": {
                    "name": "keyword.codetag.notation.ate"
                }
            }
        },
        "letter": {
            "match": "(API|Syslog|Deploy|Run|Request|Console|String|Picture)",
            "name": "keyword.letter"
        },
        "paren-expression": {
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.paren.open"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.paren.close"
                }
            },
            "name": "expression.group",
            "patterns": [{
                "include": "#expression"
            }]
        },
        "doubleQuotedStringEscapes": {
            "patterns": [{
                    "match": "`[`0abefnrtv\"'$]",
                    "name": "constant.character.escape.ate"
                },
                {
                    "include": "#unicodeEscape"
                },
                {
                    "match": "\"\"",
                    "name": "constant.character.escape.ate"
                }
            ]
        },
        "interpolation": {
            "begin": "(\\$)(\\()",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.variable.ate"
                },
                "2": {
                    "name": "punctuation.section.group.begin.ate"
                }
            },
            "contentName": "interpolated.complex.source.ate",
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.group.end.ate"
                }
            },
            "patterns": [{
                    "include": "$self"
                },
                {
                    "include": "#interpolation"
                },
                {
                    "include": "#interpolatedStringContent"
                }
            ]
        },
        "doubleQuotedString": {
            "begin": "(?<!(?<!`)\")\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ate"
                }
            },
            "end": "\"(?!\")",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ate"
                }
            },
            "name": "string.quoted.double.ate",
            "patterns": [{
                    "match": "(?i)\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,64}\\b"
                },
                {
                    "include": "#variableNoProperty"
                },
                {
                    "include": "#doubleQuotedStringEscapes"
                },
                {
                    "include": "#interpolation"
                },
                {
                    "match": "`\\s*$",
                    "name": "keyword.other.ate"
                }
            ]
        },
        "interpolatedStringContent": {
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.group.begin.ate"
                }
            },
            "contentName": "interpolated.simple.source.ate",
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.group.end.ate"
                }
            },
            "patterns": [{
                    "include": "$self"
                },
                {
                    "include": "#interpolation"
                },
                {
                    "include": "#interpolatedStringContent"
                }
            ]
        },
        "support": {
            "patterns": [{
                    "match": "(?<=^|;|&|\\s)(?::|\\.)(?=\\s|;|&|$)",
                    "name": "support.function.builtin.ate"
                },
                {
                    "match": "(?<=^|;|&|\\s)(?:alias|bg|bind|break|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)(?=\\s|;|&|$)",
                    "name": "support.function.builtin.ate"
                }
            ]
        },
        "keyword": {
            "patterns": [{
                    "match": "(?<=^|;|&|\\s)(then|else|elif|fi|for|in|do|done|select|case|continue|esac|while|until|return|If|Foreach|End|Error)(?=\\s|;|&|$)",
                    "name": "keyword.control.ate"
                },
                {
                    "match": "(?<=^|;|&|\\s)(?:export|declare|typeset|local|readonly|Var|Vector|Include|Pause)(?=\\s|;|&|$)",
                    "name": "storage.modifier.ate"
                }
            ]
        },
        "loop": {
            "patterns": [{
                    "begin": "(?<=^|;|&|\\s)(Foreach)\\s+(?=\\({2})",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "end": "(?<=^|;|&|\\s)End(?=\\s|;|&|$)",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "name": "meta.scope.for-loop.ate",
                    "patterns": [{
                        "include": "$self"
                    }]
                },
                {
                    "begin": "(?<=^|;|&|\\s)(Foreach)\\s+(.+?)\\s+(as)(?=\\s|;|&|$)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.ate"
                        },
                        "2": {
                            "name": "variable.other.loop.ate",
                            "patterns": [{
                                "include": "#string"
                            }]
                        },
                        "3": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "end": "(?<=^|;|&|\\s)done(?=\\s|;|&|$)",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "name": "meta.scope.for-in-loop.ate",
                    "patterns": [{
                        "include": "$self"
                    }]
                },
                {
                    "begin": "(?<=^|;|&|\\s)(while|until)(?=\\s|;|&|$)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "end": "(?<=^|;|&|\\s)done(?=\\s|;|&|$)",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "name": "meta.scope.while-loop.ate",
                    "patterns": [{
                        "include": "$self"
                    }]
                },
                {
                    "begin": "(?<=^|;|&|\\s)(select)\\s+((?:[^\\s\\\\]|\\\\.)+)(?=\\s|;|&|$)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.ate"
                        },
                        "2": {
                            "name": "variable.other.loop.ate"
                        }
                    },
                    "end": "(?<=^|;|&|\\s)(done)(?=\\s|;|&|$)",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "name": "meta.scope.select-block.ate",
                    "patterns": [{
                        "include": "$self"
                    }]
                },
                {
                    "begin": "(?<=^|;|&|\\s)case(?=\\s|;|&|$)",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "end": "(?<=^|;|&|\\s)esac(?=\\s|;|&|$)",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "name": "meta.scope.case-block.ate",
                    "patterns": [{
                            "begin": "(?<=^|;|&|\\s)in(?=\\s|;|&|$)",
                            "beginCaptures": {
                                "0": {
                                    "name": "keyword.control.ate"
                                }
                            },
                            "end": "(?<=^|;|&|\\s)(?=esac(\\s|;|&|$))",
                            "name": "meta.scope.case-body.ate",
                            "patterns": [{
                                    "include": "#comment"
                                },
                                {
                                    "include": "#case-clause"
                                },
                                {
                                    "include": "$self"
                                }
                            ]
                        },
                        {
                            "include": "$self"
                        }
                    ]
                },
                {
                    "begin": "(?<=^|;|&|\\s)If(?=\\s|;|&|$)",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "end": "(?<=^|;|&|\\s)End(?=\\s|;|&|$)",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "name": "meta.scope.if-block.ate",
                    "patterns": [{
                        "include": "$self"
                    }]
                },
                {
                    "begin": "(?<=^|;|&|\\s)Error(?=\\s|;|&|$)",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "end": "(?<=^|;|&|\\s)End(?=\\s|;|&|$)",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.ate"
                        }
                    },
                    "name": "meta.scope.error-block.ate",
                    "patterns": [{
                        "include": "$self"
                    }]
                }
            ]
        },
        "variableNoProperty": {
			"patterns": [
				{
					"captures": {
						"0": {
							"name": "constant.language.ate"
						},
						"1": {
							"name": "punctuation.definition.variable.ate"
						}
					},
					"comment": "These are special constants.",
					"match": "(\\$)(?i:(False|Null|True))\\b"
				}
			]
		},
        "member_access": {
			"contentName": "meta.function-call.member",
			"begin": "(?:((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|(?<=\\]|\\)))\\s*))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
			"beginCaptures": {
				"1": {
					"name": "variable.language.this.ate"
				},
				"2": {
					"name": "variable.other.object.access.ate"
				},
				"3": {
					"name": "punctuation.separator.dot-access.ate"
				},
				"4": {
					"name": "punctuation.separator.pointer-access.ate"
				},
				"5": {
					"patterns": [
						{
							"match": "(?<=(?:\\.\\*|\\.|->|->\\*))\\s*(?-mix:(?:(?:(?<!\\w)this(?!\\w))|(?:(?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|(?<=\\]|\\)))\\s*))(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->))))",
							"name": "variable.other.object.property.ate"
						},
						{
							"match": "(?:((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F]))(?:(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U000[0-9a-fA-F])))*|(?<=\\]|\\)))\\s*))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
							"captures": {
								"1": {
									"name": "variable.language.this.ate"
								},
								"2": {
									"name": "variable.other.object.access.ate"
								},
								"3": {
									"name": "punctuation.separator.dot-access.ate"
								},
								"4": {
									"name": "punctuation.separator.pointer-access.ate"
								}
							}
						},
						{
							"include": "#member_access"
						},
						{
							"include": "#method_access"
						}
					]
				},
				"6": {
					"name": "entity.name.function.member.ate"
				},
				"7": {
					"name": "punctuation.section.arguments.begin.bracket.round.function.member.ate"
				}
			},
			"end": "()",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.arguments.end.bracket.round.function.member.ate"
				}
			}
		}
    }
}
